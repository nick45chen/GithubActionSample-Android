plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// debug log
// removed in production
//if (keystorePropertiesFile.canRead()) {
//    if (keystoreProperties != null) {
//        println 'ðŸ”‘ signing'
//        println("keyAlias: ${keystoreProperties['keyAlias']}")
//        println("keyPassword: ${keystoreProperties['keyPassword']}")
//        println("storeFile: ${keystoreProperties['storeFile']}")
//        println("storePassword: ${keystoreProperties['storePassword']}")
//    } else {
//        println 'ðŸª¦ some entries in \'signing.properties\' not found!'
//    }
//} else {
//    println('ðŸ”´ keystore file not found!')
//}


android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.githubactionsample"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all{
                // this method is use to rename your release apk only
            variant ->
                variant.outputs.each{
                        // on below line we are setting a name to our apk
                    output->
                        // on below line we are specifying our app name.
                        project.ext { appName = 'githubActionSample' }
                        // on below line we are adding the formatted date to our apk file name.
                        def formattedDate = new Date().format('yyyy-MM-dd-HH-mm-ss')
                        // on below line we are creating a new name for our apk.
                        def newName = output.outputFile.name
                        // on below line we are replacing our previous name with our app name.
                        newName = newName.replace("app-", "$project.ext.appName-")
                        // on below line we are replacing -release with our formatted date.
                        newName = newName.replace("-release", "-release-" + formattedDate)
                        // at last we are setting our apk name to it.
                        output.outputFileName  = newName
                }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("bundle")) {
        def renameTaskName = "rename${task.name.capitalize()}Aab"
        def flavor = task.name.substring("bundle".length()).uncapitalize()
        tasks.create(renameTaskName, Copy) {
            def path = "${buildDir}/outputs/bundle/${flavor}/"
            from(path)
            //include "app.aab"
            include "app-${flavor}.aab"
            destinationDir file("${buildDir}/outputs/renamedBundle/")
            //rename "app.aab", "${flavor}.aab"
            rename "app-${flavor}.aab", "${flavor}.aab"
        }

        task.finalizedBy(renameTaskName)
    }
}